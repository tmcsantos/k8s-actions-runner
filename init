#!/usr/bin/env bash -l


# Prepare environment
# -- k3d --------------
NAME=gh-runner
API_PORT=${API_PORT:-6667}
WORKERS=${WORKERS:-2}
HTTP_PORT=${HTTP_PORT:-8081}
HTTPS_PORT=${HTTPS_PORT:-8443}

if [ -z "$(k3d ls | grep ${NAME})" ]; then
  k3d create \
    --name ${NAME} \
    --api-port ${API_PORT} \
    --workers ${WORKERS} \
    --publish ${HTTP_PORT}:80 \
    --publish ${HTTPS_PORT}:443 \
    --enable-registry
  sleep 10 # wait for cluster to be up
elif [ $(k3d ls | grep $NAME | cut -d\| -f 4) == 'stopped'  ]; then
  info Cluster is stopped! starting up.
  k3d start --name ${NAME}
else
  info cluster already started
fi

export KUBECONFIG=$(k3d get-kubeconfig --name="${NAME}")

# -- Tmux -------------
if [[ -n "$TMUX" ]]; then
  tmux set-environment -g KUBECONFIG $(k3d get-kubeconfig --name="${NAME}")
  tmux set-environment -g PATH $PATH
fi


# -- workaround to run rootless docker-in-docker
# https://github.com/docker/for-mac/issues/3838
case "$(uname -s)" in
  Darwin*)
    docker run --privileged --rm -v /:/host alpine chmod o=rw /host/dev/net/tun
    ;;
esac

# -- Build required docker images
docker build -t gh-runner images/runner/
docker tag gh-runner:latest registry.local:5000/gh-runner:latest
docker push registry.local:5000/gh-runner:latest

# --
ip=$(ifconfig | grep netmask | sed -n 2p | cut -d ' ' -f2)

#info "============="
#info "You can access the Tekton Dashboard at http://tekton-dashboard.${ip}.nip.io$([ $HTTP_PORT == 80 ] || echo :$HTTP_PORT)" 
#info "============="
